import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import axios from 'axios'

export const useMerchantResultsStore = defineStore('merchant_results', () => {
  const isLoading = ref(false)
  const errorMessage = ref(null)
  const merchantsList = ref([])
  const pollTime = 5000
  const pollInterval = ref(null)
  let abortController = null

  const showResultsLevel = ref(0) // 0 - –≤—Å–µ, 1 - —Ç–æ–ª—å–∫–æ —Ç—Ä–µ—Ç—å–µ, 2 - —Ç—Ä–µ—Ç—å–µ –∏ –≤—Ç–æ—Ä–æ–µ, 3 - –≤—Å–µ —Ç—Ä–∏ –ø—Ä–∏–∑–æ–≤—ã—Ö

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const chooseMerchScreen = async (level) => {
    if (abortController) {
      abortController.abort()
    }
    
    abortController = new AbortController()
    isLoading.value = true
    
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —á–∏—Å–ª–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const numericLevel = parseInt(level, 10)
      const validLevel = isNaN(numericLevel) ? 0 : Math.max(0, Math.min(3, numericLevel))
      
      const response = await axios.patch(
        `${import.meta.env.VITE_PROXY}/game_parameters/choose_current_result`,
        { request: validLevel },
        { signal: abortController.signal }
      )
      
      console.log('Screen level set to:', validLevel, 'Response:', response.data)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      showResultsLevel.value = validLevel
      
      return response.data
      
    } catch (error) {
      if (axios.isCancel(error)) {
        console.log('–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω')
        return
      }
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è —ç–∫—Ä–∞–Ω–∞:', error)
      errorMessage.value = '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
      throw error
    } finally {
      isLoading.value = false
      abortController = null
    }
  }

  const fetchCurrentScreen = async () => {
    if (abortController) {
      abortController.abort()
    }
    
    abortController = new AbortController()
    isLoading.value = true

    try {
      const response = await axios.get(
        `${import.meta.env.VITE_PROXY}/game_parameters/get_current_result`,
        { signal: abortController.signal }
      )
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è current_result_screen
      const screenValue = response.data?.current_result_screen
      const numericValue = parseInt(screenValue, 10)
      showResultsLevel.value = isNaN(numericValue) ? 0 : numericValue
      
      console.log('Current screen level:', showResultsLevel.value)
      
    } catch (error) {
      if (axios.isCancel(error)) {
        console.log('–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω')
        return
      }
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞:', error)
      errorMessage.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞'
    } finally {
      isLoading.value = false
      abortController = null
    }
  }

  const fetchMerchantResults = async () => {
    if (abortController) {
      abortController.abort()
    }
    
    abortController = new AbortController()
    isLoading.value = true
    errorMessage.value = null
    
    try {
      const merchResponse = await axios.get(
        `${import.meta.env.VITE_PROXY}/game_parameters/show_sorted_results`,
        { signal: abortController.signal }
      )
      
      console.log('API response:', merchResponse.data)
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
      merchantsList.value = merchResponse.data?.merchants || 
                           merchResponse.data?.data || 
                           merchResponse.data || 
                           []
      
      // –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      if (merchResponse.data?.showResultsLevel !== undefined) {
        const levelValue = parseInt(merchResponse.data.showResultsLevel, 10)
        showResultsLevel.value = isNaN(levelValue) ? 0 : levelValue
      }
      
      console.log('Loaded merchants:', merchantsList.value.length)
      console.log('Show results level:', showResultsLevel.value)
      
    } catch (error) {
      if (axios.isCancel(error)) {
        console.log('–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω')
        return
      }
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:', error)
      errorMessage.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤'
    } finally {
      isLoading.value = false
      abortController = null
    }
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è score
  const getScore = (merchant) => {
    return merchant?.score ?? merchant?.points ?? merchant?.value ?? merchant?.total ?? 0
  }

  // –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ merchants –ø–æ —É–±—ã–≤–∞–Ω–∏—é score
  const getSortedMerchants = computed(() => {
    return [...merchantsList.value].sort((a, b) => getScore(b) - getScore(a))
  })

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –º–µ—Å—Ç—É (place)
  const getFilteredResults = computed(() => {
    console.log('Filtering with level:', showResultsLevel.value)
    
    if (showResultsLevel.value === 0) {
      return merchantsList.value // –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    }
    
    switch (showResultsLevel.value) {
      case 1: // –¢–æ–ª—å–∫–æ —Ç—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ (place = 3)
        return merchantsList.value.filter(merchant => {
          const place = parseInt(merchant?.place, 10)
          return !isNaN(place) && place === 3
        })
      
      case 2: // –¢–æ–ª—å–∫–æ –≤—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ (place = 2)
        return merchantsList.value.filter(merchant => {
          const place = parseInt(merchant?.place, 10)
          return !isNaN(place) && place === 2
        })
      
      case 3: // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ (place = 1)
        return merchantsList.value.filter(merchant => {
          const place = parseInt(merchant?.place, 10)
          return !isNaN(place) && place === 1
        })
      
      default:
        return merchantsList.value
    }
  })

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞
  const getPlaceTitle = (place) => {
    switch (place) {
      case 1: return '–ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ'
      case 2: return '–í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ'
      case 3: return '–¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ'
      case 4: return '–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –º–µ—Å—Ç–æ'
      case 5: return '–ü—è—Ç–æ–µ –º–µ—Å—Ç–æ'
      default: return `${place}-–µ –º–µ—Å—Ç–æ`
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –º–µ—Å—Ç–∞
  const getPlaceIcon = (place) => {
    switch (place) {
      case 1: return 'ü•á'
      case 2: return 'ü•à'
      case 3: return 'ü•â'
      default: return 'üèÜ'
    }
  }

  // –ó–∞–ø—É—Å–∫ polling
  const startPolling = () => {
    if (pollInterval.value) return
    pollInterval.value = setInterval(() => {
      fetchMerchantResults()
      fetchCurrentScreen()
    }, pollTime)
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling
  const stopPolling = () => {
    if (pollInterval.value) {
      clearInterval(pollInterval.value)
      pollInterval.value = null
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ store
  const cleanup = () => {
    if (abortController) {
      abortController.abort()
    }
    stopPolling()
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
  fetchMerchantResults()
  fetchCurrentScreen()

  return {
    // state
    isLoading,
    errorMessage,
    merchantsList,
    showResultsLevel,
    
    // computed
    getFilteredResults,
    getSortedMerchants,
    
    // actions
    chooseMerchScreen,
    fetchMerchantResults,
    fetchCurrentScreen,
    startPolling,
    stopPolling,
    cleanup,
    getPlaceTitle,
    getPlaceIcon,
    
    // polling
    pollTime,
    pollInterval,
  }
})